plugins {
    id "idea"
    id "java-library"
    id "maven-publish"
    id "signing"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id "org.jetbrains.kotlin.kapt" version "1.7.10"
    id "org.springframework.boot" version "2.7.2"
    id "io.spring.dependency-management" version "1.0.12.RELEASE"
}

group "com.waigel.tolgee"
version "1.0.1"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.bootJar {enabled = false}
tasks.jar {enabled = true}

jar {
    // Remove `plain` postfix from jar file name
    archiveClassifier.set("")
}

java {
    withJavadocJar()
    withSourcesJar()
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    compileOnly "org.springframework.boot:spring-boot-starter-web:2.7.2"
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    implementation "com.google.code.gson:gson:2.9.1"

    // test frameworks
    testImplementation "org.springframework.boot:spring-boot-starter-web:2.7.2"
    testImplementation "org.springframework.boot:spring-boot-starter-test:2.7.2"
    testImplementation "org.jetbrains.kotlin:kotlin-test:1.7.10"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testImplementation "org.mockito:mockito-core:4.6.1"
    testImplementation "io.mockk:mockk:1.12.5"

}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

classes {
    doLast {
        // Copy generated spring-configuration-metadata.json into jar resources
        file("build/tmp/kapt3/classes/main/META-INF/spring-configuration-metadata.json").renameTo(file("build/resources/main/META-INF/spring-configuration-metadata.json"))
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                groupId = 'com.waigel.tolgee'
                name = 'tolgee-spring-boot-starter'
                description = 'This spring-boot library in kotlin, integrate the i18n platform tolgee into spring-boot to provide translations.'
                url = 'https://github.com/waigel/tolgee-spring-boot-starter'
                packaging = 'jar'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/waigel/tolgee-spring-boot-starter/blob/main/LICENSE'
                    }
                }

                scm {
                    url = 'https://github.com/waigel/tolgee-spring-boot-starter'
                    connection = 'scm:git://github.com:waigel/tolgee-spring-boot-starter.git'
                    developerConnection = 'scm:git://github.com:waigel/tolgee-spring-boot-starter.git'
                }

                developers {
                    developer {
                        id = 'waigel'
                        name = 'Johannes Waigel'
                        email = 'johannes@waigel.com'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
